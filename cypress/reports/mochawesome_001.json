{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-04T16:53:21.688Z",
    "end": "2025-08-04T16:53:23.292Z",
    "duration": 1604,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "80c98aea-25aa-41a2-97c0-90a95b84b073",
      "title": "",
      "fullFile": "cypress\\e2e\\crud.cy.ts",
      "file": "cypress\\e2e\\crud.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ac4a601f-8ed8-4a9c-bbea-d45950670086",
          "title": "PRODUCTS - CRUD operations",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8c3e8d31-121b-4691-a467-2fdb3214bc64",
              "title": "Create product (POST /products/add)",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a product with valid data",
                  "fullTitle": "PRODUCTS - CRUD operations Create product (POST /products/add) should create a product with valid data",
                  "timedOut": null,
                  "duration": 174,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newProduct = {\n    title: 'Test Product',\n    price: 99.99,\n    category: 'smartphones',\n};\n(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.createProduct)(newProduct).then((res) => {\n    expect(res.status).to.eq(201);\n    expect(res.body).to.include(newProduct);\n    createdProductId = res.body.id;\n});",
                  "err": {},
                  "uuid": "76e505fd-7b99-4fc1-9bc3-50741c1dfef2",
                  "parentUUID": "8c3e8d31-121b-4691-a467-2fdb3214bc64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create the product with invalid price",
                  "fullTitle": "PRODUCTS - CRUD operations Create product (POST /products/add) should create the product with invalid price",
                  "timedOut": null,
                  "duration": 158,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//the API allows to create products with prices as String like \"abc\"\nconst invalidProduct = {\n    title: 'Invalid Price',\n    price: 'abc',\n    category: 'smartphones',\n};\n(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.createProduct)(invalidProduct, { failOnStatusCode: false }).then((res) => {\n    expect(res.status).to.eq(201);\n});",
                  "err": {},
                  "uuid": "348dba81-bbc3-4e9a-a860-b6c7cb3f2339",
                  "parentUUID": "8c3e8d31-121b-4691-a467-2fdb3214bc64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76e505fd-7b99-4fc1-9bc3-50741c1dfef2",
                "348dba81-bbc3-4e9a-a860-b6c7cb3f2339"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 332,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "20501652-5adf-414c-a307-5005139dad5f",
              "title": "Update product (PUT /products/:id)",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a product successfully",
                  "fullTitle": "PRODUCTS - CRUD operations Update product (PUT /products/:id) should update a product successfully",
                  "timedOut": null,
                  "duration": 190,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedData = { title: 'Updated Title Test' };\n(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.updateProduct)(existingProductId, updatedData).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body.title).to.eq(updatedData.title);\n});",
                  "err": {},
                  "uuid": "e8df7957-3ca5-4057-89fe-fb5b27b28f07",
                  "parentUUID": "20501652-5adf-414c-a307-5005139dad5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the same data if nothing changes",
                  "fullTitle": "PRODUCTS - CRUD operations Update product (PUT /products/:id) should return the same data if nothing changes",
                  "timedOut": null,
                  "duration": 161,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sameData = { title: 'Updated Title Test' };\n(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.updateProduct)(existingProductId, sameData).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body.title).to.eq(sameData.title);\n});",
                  "err": {},
                  "uuid": "6b0969ed-6277-4780-af83-3c4bc84a4f9d",
                  "parentUUID": "20501652-5adf-414c-a307-5005139dad5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error when updating non-existent product",
                  "fullTitle": "PRODUCTS - CRUD operations Update product (PUT /products/:id) should return error when updating non-existent product",
                  "timedOut": null,
                  "duration": 180,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.updateProduct)(99999, { title: 'Does Not Exist' }, { failOnStatusCode: false }).then((res) => {\n    expect(res.status).to.eq(404);\n});",
                  "err": {},
                  "uuid": "b7c92dad-021b-4330-970f-0e01c41ecd3b",
                  "parentUUID": "20501652-5adf-414c-a307-5005139dad5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept invalid price due to missing validation in the API",
                  "fullTitle": "PRODUCTS - CRUD operations Update product (PUT /products/:id) should accept invalid price due to missing validation in the API",
                  "timedOut": null,
                  "duration": 162,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.updateProduct)(existingProductId, { price: 'invalid' }, { failOnStatusCode: false }).then((res) => {\n    expect(res.status).to.eq(200); // It wrongly accepts\n    expect(typeof res.body.price).to.eq('string'); // Should not be string\n});",
                  "err": {},
                  "uuid": "081fb5bc-6724-4abb-9cfb-040cea87dac4",
                  "parentUUID": "20501652-5adf-414c-a307-5005139dad5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support PATCH as well",
                  "fullTitle": "PRODUCTS - CRUD operations Update product (PUT /products/:id) should support PATCH as well",
                  "timedOut": null,
                  "duration": 155,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n    method: 'PATCH',\n    url: `/products/${existingProductId}`,\n    body: { price: 222.22 },\n}).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body.price).to.eq(222.22);\n});",
                  "err": {},
                  "uuid": "c85de7cc-d5a2-4ef6-a3fe-1ada0ec5e969",
                  "parentUUID": "20501652-5adf-414c-a307-5005139dad5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8df7957-3ca5-4057-89fe-fb5b27b28f07",
                "6b0969ed-6277-4780-af83-3c4bc84a4f9d",
                "b7c92dad-021b-4330-970f-0e01c41ecd3b",
                "081fb5bc-6724-4abb-9cfb-040cea87dac4",
                "c85de7cc-d5a2-4ef6-a3fe-1ada0ec5e969"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 848,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5789af0f-3745-40ea-a8ae-aebb11efdf71",
              "title": "Delete product (DELETE /products/:id)",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete the created product",
                  "fullTitle": "PRODUCTS - CRUD operations Delete product (DELETE /products/:id) should delete the created product",
                  "timedOut": null,
                  "duration": 158,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.deleteProduct)(1).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body).to.have.property('isDeleted', true);\n});",
                  "err": {},
                  "uuid": "6e45411c-5f5d-43a3-bdbf-dd8de6dcfb75",
                  "parentUUID": "5789af0f-3745-40ea-a8ae-aebb11efdf71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 when trying to delete non-existent product",
                  "fullTitle": "PRODUCTS - CRUD operations Delete product (DELETE /products/:id) should return 404 when trying to delete non-existent product",
                  "timedOut": null,
                  "duration": 155,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.deleteProduct)(99999, { failOnStatusCode: false }).then((res) => {\n    expect(res.status).to.eq(404);\n});",
                  "err": {},
                  "uuid": "bdfcece7-cf45-4f89-ad31-697ae9449fb6",
                  "parentUUID": "5789af0f-3745-40ea-a8ae-aebb11efdf71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e45411c-5f5d-43a3-bdbf-dd8de6dcfb75",
                "bdfcece7-cf45-4f89-ad31-697ae9449fb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 313,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}