{
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 11,
    "pending": 1,
    "failures": -1,
    "start": "2025-08-04T16:53:24.376Z",
    "end": "2025-08-04T16:53:27.002Z",
    "duration": 2626,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 8.333333333333332,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3b704de8-b23f-43c7-8991-56af3d79cc45",
      "title": "",
      "fullFile": "cypress\\e2e\\products.cy.ts",
      "file": "cypress\\e2e\\products.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "da2a8379-74a4-421a-accb-02eb64fd95a4",
          "title": "GET /products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6769f185-fa15-46e9-b6de-7850d811812d",
              "title": "Success cases",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the product list",
                  "fullTitle": "GET /products Success cases should return the product list",
                  "timedOut": null,
                  "duration": 183,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)().then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body).to.have.property('products').that.is.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n    const firstProduct = res.body.products[0];\n    expect(firstProduct).to.have.property('id');\n    expect(firstProduct).to.have.property('title');\n    expect(firstProduct).to.have.property('price');\n    expect(firstProduct).to.have.property('category');\n});",
                  "err": {},
                  "uuid": "5649b7a2-4711-47df-84d2-d8694b886e0a",
                  "parentUUID": "6769f185-fa15-46e9-b6de-7850d811812d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 10 products when limit is 10",
                  "fullTitle": "GET /products Success cases should return 10 products when limit is 10",
                  "timedOut": null,
                  "duration": 191,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 10 }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body)\n        .to.have.property('products')\n        .that.is.an('array')\n        .and.have.length(10);\n    expect(res.body).to.have.property('limit', 10);\n});",
                  "err": {},
                  "uuid": "774da9a8-4407-47be-a08e-25ba132e8f1d",
                  "parentUUID": "6769f185-fa15-46e9-b6de-7850d811812d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return all products when limit is 0",
                  "fullTitle": "GET /products Success cases should return all products when limit is 0",
                  "timedOut": null,
                  "duration": 367,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 0 }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body).to.have.property('products').that.is.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "691d500d-1ee2-4dae-a1c8-436bb3d69a32",
                  "parentUUID": "6769f185-fa15-46e9-b6de-7850d811812d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return all products when limit is a negative number",
                  "fullTitle": "GET /products Success cases should return all products when limit is a negative number",
                  "timedOut": null,
                  "duration": 361,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: -1 }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body).to.have.property('products').that.is.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "60b344cd-48e3-4e17-8363-f61d496b58de",
                  "parentUUID": "6769f185-fa15-46e9-b6de-7850d811812d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return different products when using skip parameter",
                  "fullTitle": "GET /products Success cases should return different products when using skip parameter",
                  "timedOut": null,
                  "duration": 320,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 5, skip: 0 }).then((res1) => {\n    (0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 5, skip: 5 }).then((res2) => {\n        expect(res1.status).to.eq(200);\n        expect(res2.status).to.eq(200);\n        expect(res1.body).to.have.property('products').that.is.an('array');\n        expect(res2.body).to.have.property('products').that.is.an('array');\n        expect(res1.body.products[0].id).to.not.eq(res2.body.products[0].id);\n    });\n});",
                  "err": {},
                  "uuid": "4c8e9971-94b5-4886-9fb6-3b52bca9aca6",
                  "parentUUID": "6769f185-fa15-46e9-b6de-7850d811812d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5649b7a2-4711-47df-84d2-d8694b886e0a",
                "774da9a8-4407-47be-a08e-25ba132e8f1d",
                "691d500d-1ee2-4dae-a1c8-436bb3d69a32",
                "60b344cd-48e3-4e17-8363-f61d496b58de",
                "4c8e9971-94b5-4886-9fb6-3b52bca9aca6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1422,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11f79cc0-22b3-4b21-bec5-33c71123664e",
              "title": "Validation and errors",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 error when limit is not a number",
                  "fullTitle": "GET /products Validation and errors should return 400 error when limit is not a number",
                  "timedOut": null,
                  "duration": 155,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 'abc', failOnStatusCode: false }).then((res) => {\n    expect(res.status).to.eq(400);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body).to.have.property('message');\n});",
                  "err": {},
                  "uuid": "8fd5c098-3900-47c4-b3fc-9149145f1207",
                  "parentUUID": "11f79cc0-22b3-4b21-bec5-33c71123664e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fd5c098-3900-47c4-b3fc-9149145f1207"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 155,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "311030d1-19f6-423e-b73f-bed0fbd36162",
              "title": "Sorting and Ordering",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should sort products by price in descending order",
                  "fullTitle": "GET /products Sorting and Ordering should sort products by price in descending order",
                  "timedOut": null,
                  "duration": 187,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: 'price', order: 'desc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    const prices = res.body.products.map((p) => p.price);\n    const sortedPrices = [...prices].sort((a, b) => b - a);\n    expect(prices).to.deep.equal(sortedPrices);\n});",
                  "err": {},
                  "uuid": "79452bcd-9b84-4a9f-a967-031670318742",
                  "parentUUID": "311030d1-19f6-423e-b73f-bed0fbd36162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort products by title in ascending order",
                  "fullTitle": "GET /products Sorting and Ordering should sort products by title in ascending order",
                  "timedOut": null,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "// Skipped because DummyJSON API does not return correctly sorted titles (inconsistent backend ordering)\n(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: 'title', order: 'asc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    const products = res.body.products;\n    const titles = products.map((p) => p.title.toLowerCase());\n    const sortedTitles = [...titles].sort();\n    expect(titles).to.deep.equal(sortedTitles);\n});",
                  "err": {},
                  "uuid": "a306b829-0ff5-4638-baaf-a34f252f681a",
                  "parentUUID": "311030d1-19f6-423e-b73f-bed0fbd36162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort products by stock in ascending order",
                  "fullTitle": "GET /products Sorting and Ordering should sort products by stock in ascending order",
                  "timedOut": null,
                  "duration": 179,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: 'stock', order: 'asc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    const stocks = res.body.products.map((p) => p.stock);\n    const sorted = [...stocks].sort((a, b) => a - b);\n    expect(stocks).to.deep.equal(sorted);\n});",
                  "err": {},
                  "uuid": "7e8657fb-f7b1-4e29-8841-5d350365b289",
                  "parentUUID": "311030d1-19f6-423e-b73f-bed0fbd36162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to default sort if sortBy is empty",
                  "fullTitle": "GET /products Sorting and Ordering should fallback to default sort if sortBy is empty",
                  "timedOut": null,
                  "duration": 195,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: '', order: 'asc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body.products).to.be.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "3bcd0567-99ba-4ed5-a28b-15299900cc21",
                  "parentUUID": "311030d1-19f6-423e-b73f-bed0fbd36162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore invalid sortBy and return unsorted/default results",
                  "fullTitle": "GET /products Sorting and Ordering should ignore invalid sortBy and return unsorted/default results",
                  "timedOut": null,
                  "duration": 180,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: 'banana' }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body).to.have.property('products').that.is.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "0d7283af-62ec-4ad8-a574-5b96bc3ff034",
                  "parentUUID": "311030d1-19f6-423e-b73f-bed0fbd36162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore order param if sortBy is missing",
                  "fullTitle": "GET /products Sorting and Ordering should ignore order param if sortBy is missing",
                  "timedOut": null,
                  "duration": 187,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ order: 'desc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body.products).to.be.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "daf84622-d15f-4111-9860-fda9cae048a1",
                  "parentUUID": "311030d1-19f6-423e-b73f-bed0fbd36162",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79452bcd-9b84-4a9f-a967-031670318742",
                "7e8657fb-f7b1-4e29-8841-5d350365b289",
                "3bcd0567-99ba-4ed5-a28b-15299900cc21",
                "0d7283af-62ec-4ad8-a574-5b96bc3ff034",
                "daf84622-d15f-4111-9860-fda9cae048a1"
              ],
              "failures": [],
              "pending": [
                "a306b829-0ff5-4638-baaf-a34f252f681a"
              ],
              "skipped": [],
              "duration": 928,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}