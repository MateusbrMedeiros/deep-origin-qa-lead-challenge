{
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 11,
    "pending": 1,
    "failures": -1,
    "start": "2025-08-04T16:55:47.743Z",
    "end": "2025-08-04T16:55:50.453Z",
    "duration": 2710,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 8.333333333333332,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1c498efe-07a2-492c-8134-6009a5fc699d",
      "title": "",
      "fullFile": "cypress\\e2e\\products.cy.ts",
      "file": "cypress\\e2e\\products.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "154626a3-9420-4c81-8698-96cf2c59edb5",
          "title": "GET /products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bed54212-d896-41fa-accd-23e6fd7ca232",
              "title": "Success cases",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the product list",
                  "fullTitle": "GET /products Success cases should return the product list",
                  "timedOut": null,
                  "duration": 199,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)().then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body).to.have.property('products').that.is.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n    const firstProduct = res.body.products[0];\n    expect(firstProduct).to.have.property('id');\n    expect(firstProduct).to.have.property('title');\n    expect(firstProduct).to.have.property('price');\n    expect(firstProduct).to.have.property('category');\n});",
                  "err": {},
                  "uuid": "a2f0ca54-3e51-46ae-a5cd-d27c65cfef28",
                  "parentUUID": "bed54212-d896-41fa-accd-23e6fd7ca232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 10 products when limit is 10",
                  "fullTitle": "GET /products Success cases should return 10 products when limit is 10",
                  "timedOut": null,
                  "duration": 200,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 10 }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body)\n        .to.have.property('products')\n        .that.is.an('array')\n        .and.have.length(10);\n    expect(res.body).to.have.property('limit', 10);\n});",
                  "err": {},
                  "uuid": "4442d676-46cd-4c2c-a0e9-f16e59b301fe",
                  "parentUUID": "bed54212-d896-41fa-accd-23e6fd7ca232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return all products when limit is 0",
                  "fullTitle": "GET /products Success cases should return all products when limit is 0",
                  "timedOut": null,
                  "duration": 410,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 0 }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body).to.have.property('products').that.is.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "f2efb542-2473-43dd-a1bf-148118f6ffa4",
                  "parentUUID": "bed54212-d896-41fa-accd-23e6fd7ca232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return all products when limit is a negative number",
                  "fullTitle": "GET /products Success cases should return all products when limit is a negative number",
                  "timedOut": null,
                  "duration": 353,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: -1 }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body).to.have.property('products').that.is.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "ec0802ce-e675-4475-9884-745704586c6e",
                  "parentUUID": "bed54212-d896-41fa-accd-23e6fd7ca232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return different products when using skip parameter",
                  "fullTitle": "GET /products Success cases should return different products when using skip parameter",
                  "timedOut": null,
                  "duration": 346,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 5, skip: 0 }).then((res1) => {\n    (0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 5, skip: 5 }).then((res2) => {\n        expect(res1.status).to.eq(200);\n        expect(res2.status).to.eq(200);\n        expect(res1.body).to.have.property('products').that.is.an('array');\n        expect(res2.body).to.have.property('products').that.is.an('array');\n        expect(res1.body.products[0].id).to.not.eq(res2.body.products[0].id);\n    });\n});",
                  "err": {},
                  "uuid": "c338fc77-03f2-4ff2-9524-ea42b95f9b39",
                  "parentUUID": "bed54212-d896-41fa-accd-23e6fd7ca232",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2f0ca54-3e51-46ae-a5cd-d27c65cfef28",
                "4442d676-46cd-4c2c-a0e9-f16e59b301fe",
                "f2efb542-2473-43dd-a1bf-148118f6ffa4",
                "ec0802ce-e675-4475-9884-745704586c6e",
                "c338fc77-03f2-4ff2-9524-ea42b95f9b39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1508,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45ed194e-8e3c-4c92-80b3-e1222bf1e17d",
              "title": "Validation and errors",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 error when limit is not a number",
                  "fullTitle": "GET /products Validation and errors should return 400 error when limit is not a number",
                  "timedOut": null,
                  "duration": 155,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ limit: 'abc', failOnStatusCode: false }).then((res) => {\n    expect(res.status).to.eq(400);\n    expect(res.headers['content-type']).to.include('application/json');\n    expect(res.body).to.have.property('message');\n});",
                  "err": {},
                  "uuid": "3e51a359-6c1a-4fb7-8c08-f3801b34f6f7",
                  "parentUUID": "45ed194e-8e3c-4c92-80b3-e1222bf1e17d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e51a359-6c1a-4fb7-8c08-f3801b34f6f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 155,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21d2f267-6f63-496a-bd01-d5c8f87ea9d2",
              "title": "Sorting and Ordering",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should sort products by price in descending order",
                  "fullTitle": "GET /products Sorting and Ordering should sort products by price in descending order",
                  "timedOut": null,
                  "duration": 190,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: 'price', order: 'desc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    const prices = res.body.products.map((p) => p.price);\n    const sortedPrices = [...prices].sort((a, b) => b - a);\n    expect(prices).to.deep.equal(sortedPrices);\n});",
                  "err": {},
                  "uuid": "66b8706c-4d1e-4712-863d-40f61baab860",
                  "parentUUID": "21d2f267-6f63-496a-bd01-d5c8f87ea9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort products by title in ascending order",
                  "fullTitle": "GET /products Sorting and Ordering should sort products by title in ascending order",
                  "timedOut": null,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "// Skipped because DummyJSON API does not return correctly sorted titles (inconsistent backend ordering)\n(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: 'title', order: 'asc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    const products = res.body.products;\n    const titles = products.map((p) => p.title.toLowerCase());\n    const sortedTitles = [...titles].sort();\n    expect(titles).to.deep.equal(sortedTitles);\n});",
                  "err": {},
                  "uuid": "873a8e0f-a049-4a60-a54d-aa35c2464d11",
                  "parentUUID": "21d2f267-6f63-496a-bd01-d5c8f87ea9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort products by stock in ascending order",
                  "fullTitle": "GET /products Sorting and Ordering should sort products by stock in ascending order",
                  "timedOut": null,
                  "duration": 191,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: 'stock', order: 'asc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    const stocks = res.body.products.map((p) => p.stock);\n    const sorted = [...stocks].sort((a, b) => a - b);\n    expect(stocks).to.deep.equal(sorted);\n});",
                  "err": {},
                  "uuid": "054e713e-e6c5-4dd3-b24e-704dc861554e",
                  "parentUUID": "21d2f267-6f63-496a-bd01-d5c8f87ea9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to default sort if sortBy is empty",
                  "fullTitle": "GET /products Sorting and Ordering should fallback to default sort if sortBy is empty",
                  "timedOut": null,
                  "duration": 192,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: '', order: 'asc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body.products).to.be.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "beae6fc9-72d7-4dee-b4d3-0d280aba6529",
                  "parentUUID": "21d2f267-6f63-496a-bd01-d5c8f87ea9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore invalid sortBy and return unsorted/default results",
                  "fullTitle": "GET /products Sorting and Ordering should ignore invalid sortBy and return unsorted/default results",
                  "timedOut": null,
                  "duration": 179,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ sortBy: 'banana' }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body).to.have.property('products').that.is.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "72775457-24b4-47e6-b2a8-2d772af69d8f",
                  "parentUUID": "21d2f267-6f63-496a-bd01-d5c8f87ea9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore order param if sortBy is missing",
                  "fullTitle": "GET /products Sorting and Ordering should ignore order param if sortBy is missing",
                  "timedOut": null,
                  "duration": 168,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,_api_products__WEBPACK_IMPORTED_MODULE_0__.getAllProducts)({ order: 'desc' }).then((res) => {\n    expect(res.status).to.eq(200);\n    expect(res.body.products).to.be.an('array');\n    expect(res.body.products.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "caa3da30-ae06-4cb8-8e91-2b2885c24c84",
                  "parentUUID": "21d2f267-6f63-496a-bd01-d5c8f87ea9d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66b8706c-4d1e-4712-863d-40f61baab860",
                "054e713e-e6c5-4dd3-b24e-704dc861554e",
                "beae6fc9-72d7-4dee-b4d3-0d280aba6529",
                "72775457-24b4-47e6-b2a8-2d772af69d8f",
                "caa3da30-ae06-4cb8-8e91-2b2885c24c84"
              ],
              "failures": [],
              "pending": [
                "873a8e0f-a049-4a60-a54d-aa35c2464d11"
              ],
              "skipped": [],
              "duration": 920,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}